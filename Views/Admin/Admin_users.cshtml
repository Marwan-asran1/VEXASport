@model List<VEXA.Models.User>

@{
    ViewBag.Title = "User Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<link rel="stylesheet" href="~/AdminStyle/css/sb-admin-2.css" />
<script src="~/AdminStyle/js/sb-admin-2.js"></script>

<div class="container-fluid">
    <h1 class="h3 mb-2 text-gray-800">User Manager</h1>

    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">All Users</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" id="usersTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Phone Number</th>
                            <th>Address</th>
                            <th>Gender</th>
                            <th>Role</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in Model)
                        {
                            <tr id="user-row-@user.Id">
                                <td>@user.Id</td>
                                <td class="user-name">@user.Name</td>
                                <td class="user-email">@user.Email</td>
                                <td class="user-phone">@user.PhoneNumber</td>
                                <td class="user-address">@user.Address</td>
                                <td class="user-gender">@user.Gender</td>
                                <td class="user-role">@user.UserRole.ToString()</td>
                                <td>
                                    <button class="btn btn-warning btn-sm" onclick="openEditUserModal(@user.Id)">Edit</button>
                                    <form asp-controller="User" asp-action="DeleteUser" asp-route-id="@user.Id" method="post" style="display:inline;" onsubmit="return confirm('Are you sure you want to delete this user?');">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                                    </form>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Edit User Modal -->
<div id="editUserModal" class="modal" style="display:none;">
    <div class="modal-content">
        <span class="close" id="closeEditUserModal">&times;</span>
        <h2>Edit User</h2>
        <form id="editUserForm">
            @Html.AntiForgeryToken()
            <input type="hidden" id="userId" name="Id" />

            <div class="form-group">
                <label for="username">Name:</label>
                <input type="text" id="username" name="Name" class="form-control" required />
            </div>

            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" id="email" name="Email" class="form-control" required />
            </div>

            <div class="form-group">
                <label for="phone">Phone Number:</label>
                <input type="tel" id="phone" name="PhoneNumber" class="form-control" />
            </div>

            <div class="form-group">
                <label for="address">Address:</label>
                <input type="text" id="address" name="Address" class="form-control" />
            </div>

            <div class="form-group">
                <label for="gender">Gender:</label>
                <select id="gender" name="Gender" class="form-control" required>
                    <option value="">-- Select Gender --</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </select>
            </div>

            <div class="form-group">
                <label for="role">Role:</label>
                <select id="role" name="UserRole" class="form-control" required>
                    <option value="Customer">Customer</option>
                    <option value="Admin">Admin</option>
                </select>
            </div>

            <div id="formErrors" class="text-danger mb-3"></div>

            <button type="submit" class="btn btn-primary">Update</button>
        </form>
    </div>
</div>

<style>
    table thead tr {
        background-color: rgb(30, 28, 28);
        color: rgb(255, 255, 255);
        text-align: center;
        font-weight: bold;
    }

    table th, table td {
        padding: 12px 15px;
        border: 1px solid #ddd;
        max-width: 150px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    table tbody tr {
        border-bottom: 1px solid #ddd;
    }

        table tbody tr:nth-of-type(even) {
            background-color: #f3f3f3;
        }

        table tbody tr:hover {
            background-color: #f1f1f1;
        }


    .table-responsive {
        overflow-x: auto;
    }

    .Add {
        position: fixed;
        bottom: 40px;
        right: 30px;
        background-color: green;
        color: white;
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        font-size: 24px;
        cursor: pointer;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.4); /* Black background with opacity */
    }

    .modal-content {
        background-color: #fff;
        margin: 5% auto;
        padding: 20px;
        border-radius: 8px;
        width: 50%;
        max-height: 80vh;
        overflow-y: auto; /* scroll inside the modal */
    }


    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .upload-btn {
        border-radius: 5px;
        margin-top: 10px;
        background-color: #007bff;
        color: white;
        padding: 10px 15px;
        border: none;
        cursor: pointer;
        display: inline-block;
    }

    #imageUpload {
        display: none;
    }

    .msg {
        display: none; /* Hidden by default */
        position: fixed;
        z-index: 2;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4); /* Black background with opacity */
    }

    .msg-content {
        background-color: #fff;
        margin: 15% auto;
        padding: 20px;
        border-radius: 8px;
        width: 40%;
        text-align: center;
    }

    .close-popup {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

        .close-popup:hover,
        .close-popup:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .edit {
        background-color: #007bff;
        color: white;
        padding: 5px 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .delete {
        background-color: #dc3545;
        color: white;
        padding: 5px 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    }
</style>

<script>
    const userModal = document.getElementById("editUserModal");
    const userForm = document.getElementById("editUserForm");
    const closeBtn = document.getElementById("closeEditUserModal");
    const formErrors = document.getElementById("formErrors");

    // Open modal & populate form
    async function openEditUserModal(userId) {
        formErrors.innerHTML = "";
        const response = await fetch(`/User/GetUser?id=${userId}`);
        if (!response.ok) {
            alert("Failed to load user data.");
            return;
        }
        const user = await response.json();

        document.getElementById("userId").value = user.id;
        document.getElementById("username").value = user.name;
        document.getElementById("email").value = user.email;
        document.getElementById("phone").value = user.phoneNumber ?? "";
        document.getElementById("address").value = user.address ?? "";
        document.getElementById("gender").value = user.gender ?? "";
        document.getElementById("role").value = user.userRole ?? "Customer";

        userModal.style.display = "block";
    }

    // Close modal
    closeBtn.onclick = () => {
        userModal.style.display = "none";
        formErrors.innerHTML = "";
    };
    window.onclick = (event) => {
        if (event.target == userModal) {
            userModal.style.display = "none";
            formErrors.innerHTML = "";
        }
    };

    // AJAX form submit
    userForm.addEventListener("submit", async function (e) {
        e.preventDefault();
        formErrors.innerHTML = "";

        const formData = new FormData(userForm);
        const id = formData.get("Id");

        // Add AntiForgeryToken header
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        try {
            const response = await fetch(`/User/EditUser/${id}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                body: formData
            });

            const data = await response.json();

            if (data.success) {
                // Update table row with new data
                const row = document.getElementById(`user-row-${id}`);
                if (row) {
                    row.querySelector(".user-name").innerText = data.user.name;
                    row.querySelector(".user-email").innerText = data.user.email;
                    row.querySelector(".user-phone").innerText = data.user.phoneNumber ?? "";
                    row.querySelector(".user-address").innerText = data.user.address ?? "";
                    row.querySelector(".user-gender").innerText = data.user.gender ?? "";
                    row.querySelector(".user-role").innerText = data.user.userRole;
                }
                userModal.style.display = "none";
            } else {
                if (data.errors) {
                    formErrors.innerHTML = data.errors.join("<br/>");
                } else {
                    formErrors.innerText = data.message || "Update failed.";
                }
            }
        } catch (error) {
            formErrors.innerText = "An error occurred.";
            console.error(error);
        }
    });
</script>
